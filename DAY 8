Q1
/*Which among them forms a perfect Sudoku Pattern*/

class Solution {
public:
    bool isValidSudoku(vector<vector<char>>& board) {
    unordered_set<string>st;
    for(int i = 0;i< 9; i++){
        for(int j = 0; j< 9; j++){
            if(board[i][j] == '.') continue;
            string row = string(1,board[i][j]) + "_ROW_" + to_string(i);
            string col = string(1,board[i][j]) + "_COL_" + to_string(j);
            string box = string(1,board[i][j]) + "_BOX_" + to_string(i/3)+"_"+to_string(j/3);
            if(st.find(row) != st.end() || st.find(col) != st.end() || st.find(box) != st.end()){
                return false;
            }
            st.insert(row);
            st.insert(col);
            st.insert(box);
        }
    }   
    return true; 
    }
};


Q2
Nuts and Bolts Problem

 void matchPairs(int n, char nuts[], char bolts[]) {
        // code here !,#,$,%,&,*,?,@,^
        char temp[]={'!','#','$','%','&','*','?','@','^'};
        unordered_map<char,int> mpp;
        int j = 0;
        for(int i = 0; i < n; i++){
            mpp[nuts[i]]++;
        }
        for(int i = 0; i < 9; i++){
            if(mpp[temp[i]]){
               nuts[j] = temp[i];
            bolts[j] = temp[i];
            j++;
            }
           }
    }


Q3
K Sized Subarray Maximum

vector<int> maxOfSubarrays(vector<int>& arr, int k) {
        // // code here TLE 1110 passed
        int n = arr.size();
        if(k == 1) return arr;
        vector<int> ans;
        // for(int i = 0; i < n-k+1; i++){
        //     int maxi = 0;
        //     for(int j = i; j < k+i; j++){
        //         maxi = max(arr[j],maxi);
        //     }
        //     ans.push_back(maxi);
        // }
        
        // using deque
        deque<int> deq;
        for(int i = 0; i < n; i++){
            //step 1
            while(deq.front() <= i - k && !deq.empty()){
                deq.pop_front();
            }
            // step 2
            while( !deq.empty() && arr[i] > arr[deq.back()]){
                deq.pop_back();
            }
            // step 3
            deq.push_back(i);
            // step 4
            if(i >= k - 1){
                ans.push_back(arr[deq.front()]);
            }
        }
        return ans;
    }
